VotingSyste - System Architecture and Design
As per scoped document base framework, design and features has been developed.
There is always scope of improvement to any design and frammework. We have developed architectural bas and implemented given features.
There are couple of use case(s) were it require more analysis to make it more robust since it just demo we made few assumtions.

It has below projects :
1- VotingSystem.API
    It is REST API developed in asp.net core using c#. The user will interact with system using REST API.
    It has below implementation
      Routing
      HTTP pipeline
      IOC implementation using inbuild DI
      Instance of Service and db context are injected based on requirement without concretation.
      
2- VotingSystem.Contract :
    It contains interfaces(contract) implemented by services and consumed by web api(Controller)

3- VotingSystem.DTO  :
    It has Data Transport Object that will be referred use to transfer data from one layer to another layer of system.

4- VotingSystem.Models  :
    This project has domain model created from database table. It has ORM context that performs db operations.
    In this demo i have used Microsoft.EntityFramework.Core.
    
5- VotingSystem.Service  :
    It performs business implementations, domain logic and validations 
    It has dependency of VotingSystem.Models for ORM and domain model
    It implements respective contract of VotingSystem.Contract
    It has base service that is performing common operationa and tasks
    Instnaces of service class in web api layer are injected by DI
    Controller constructor has only interface reference
    

We have used OOPs concept as well as couple of SOLID principles as APPLICABLE.
-   OOPS :
    -   Inheritence (Service class, Controller)
    -   Method Overriding (controlle 's GetItem, 
-   SOLID Principles :
    -   S:  Developed all the class to have only one responsibility and one reason to change.
            Ex service class, DTO class
    -   O:  Open for extension and close for modification
    -   L:  Liskove subsitution principle :
            Derivative class can be replaced by base class (VoterService class)
    -   I:  Interface segeregation :
            Every interface are thin and properly grained to serve it purpose rather developing fat interfaces.
    -   D:  Dependency Inversion
            I have implemented DI using .net core inbuild DI
            Ex service instances are injected automatically in controller constructor withou using new keyword
 
 This is just developed for demo purpose considering given business flow and few assumtion.
 OUT OF SCOPE : logging, authentication, error handling, concurrency etc.
 
 We can enhance this approach with design patterns based on problem area but in this scope and timeline we have not considered all and.
 
 
 For TESTING : To test this REST API i have added post man file at root directory. You can import this postman collection file and test all api
 
 Thanking you
 
